@{
    Layout = "_NavigationLayout";
}
@model StandingsViewModel

<legend>
    <h1 style="text-align: center;">Standings</h1>
    
</legend>
<div class="row">
    <div class="col-sm-6 col-md-6">

        <h2>Teams</h2>

        <table class="table">
            <thead class="thead-dark">
            <tr>
                <th>Rank</th>
                <th>Team Name/ID</th>
                <th>Average P&amp;L</th>
            </tr>
            <thead>
            <tbody>

            @{
                var traders = new List<Trader>();

                var teams = Model.Teams.Where(x => x.Id != Constants.ExchangeId
                                                   && x.Id != Constants.MarketMakersId
                                                   && x.Traders.Any()).ToList();

                foreach (var team in teams)
                {
                    team.Calculate(Model.Prices);
                }

                teams = teams.OrderByDescending(t => t.AveragePnL()).ToList();

                var rank = 0;

                for (var i = 0; i < teams.Count; ++i)
                {
                    var team = teams[i];
                    traders.AddRange(team.Traders);

                    ++rank;

                    var teamAveragePnL = teams[i].AveragePnL();
                    <tr>
                        <th scope="row">
                            @(i > 0 && teamAveragePnL == teams[i - 1].AveragePnL()
                                  ? "-"
                                  : rank.ToString())
                        </th>
                        <td>@teams[i].Name - @teams[i].Id</td>

                        @{

                            if (teamAveragePnL < 0)
                            {
                                <td style="color: red">($@($"{Math.Abs(teamAveragePnL):n0}"))</td>
                            }
                            else
                            {
                                <td>$@($"{teamAveragePnL:n0}")</td>
                            }
                        }


                    </tr>
                }

                traders = traders.OrderByDescending(t => t.PnL()).ToList();
            }
            </tbody>
        </table>

    </div>

    <div class="col-sm-6 col-md-6">

        <h2>Traders</h2>

        <table class="table">
            <thead class="thead-dark">
            <tr>
                <th>Rank</th>
                <th>Name/ID</th>
                <th>P&amp;L</th>
            </tr>
            <thead>
            <tbody>

            @{
                rank = 0;

                for (var i = 0; i < traders.Count; ++i)
                {
                    ++rank;
                    var trader = traders[i];
                    var traderPnL = trader.PnL();

                    <tr>
                        <th scope="row">
                            @(i > 0 && traderPnL == traders[i - 1].PnL()
                                  ? "-"
                                  : rank.ToString())
                        </th>
                        <td>@trader.Name - @trader.Id</td>

                        @{
                            if (traderPnL < 0)
                            {
                                <td style="color: red">($@($"{Math.Abs(traderPnL):n0}"))</td>
                            }
                            else
                            {
                                <td>$@($"{traderPnL:n0}")</td>
                            }
                        }

                    </tr>
                }
            }

            </tbody>
        </table>

    </div>
</div>