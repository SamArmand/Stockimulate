@model TickerViewModel

<div class="container-fluid">

    <div class="row">

        <div class="col-9" id="GraphDiv">

            <canvas id="Chart"></canvas>

        </div>

        <div class="col-3">

            <div class="card text-white mb-3 text-center bg-primary" style="max-width: 20rem;">
                <div class="card-body">
                    <h1 id="TickerPriceH1">$@Model.Price</h1>
                </div>
            </div>

            <div class="card text-white mb-3 text-center @Model.TickerChangeDivCssCLass" id="TickerChangeDiv" style="max-width: 20rem;">
                <div class="card-body">
                    <h1 id="TickerChangeH1">@Model.Change</h1>
                </div>
            </div>

        </div>

    </div>

    <div class="col-sm-10 text-white @Model.StatusDivCssClass" id="StatusDiv">

        <h1>
            Q<span id="QuarterSpan">@TickerViewModel.Quarter.ToString()</span> | Day <span id="DaySpan">@TickerViewModel.Day.ToString()</span> | Market <span id="StatusSpan">@TickerViewModel.MarketStatus</span>
        </h1>
    </div>

    <div class="col-sm-12">
        <h2 id="NewsH2">@TickerViewModel.News</h2>
    </div>

</div>


<script src="https://js.pusher.com/4.1/pusher.min.js"></script>
<script>

    // ReSharper disable once PossiblyUnassignedProperty
    const channel = (new Pusher('3a92cb578fb0877c47f0',
        {
            cluster: 'us2',
            encrypted: true
// ReSharper disable once PossiblyUnassignedProperty
        })).subscribe('stockimulate');

    channel.bind('update-market',
        function(message) {

            const effect = message.effects[@Model.TickerId];

            const newPrice = parseInt(document.getElementById("TickerPriceH1").innerText.substring(1)) + effect;

            document.getElementById("TickerPriceH1").innerHTML = `$${newPrice}`;

            chart.data.datasets[0].data.push({ x: parseInt(message.day), y: newPrice });
            window.myLine.update();

            if (effect > 0) {
                document.getElementById("TickerChangeDiv").className = "col-sm-12 bg-success text-white";
                document.getElementById("TickerChangeH1").innerHTML = `+${effect}`;
            } else {
                document.getElementById("TickerChangeH1").innerHTML = effect;
                if (effect < 0)
                    document.getElementById("TickerChangeDiv").className = "col-sm-12 bg-danger text-white";
                else
                    document.getElementById("TickerChangeDiv").className = "col-sm-12 bg-warning text-white";
            }

            if (message.news !== "")
                document.getElementById("NewsH2").innerHTML = message.news;
            
            if (message.close) {
                document.getElementById("StatusDiv").className = "col-sm-10 text-white bg-danger";
                document.getElementById("StatusSpan").innerHTML = "CLOSED";
            } else
                document.getElementById("DaySpan").innerHTML = (parseInt(document.getElementById("DaySpan").innerHTML) + 1); 
        });

    channel.bind('open-market',
        function() {
            document.getElementById("StatusDiv").className = "col-sm-10 text-white bg-success";
            document.getElementById("StatusSpan").innerHTML = "OPEN";
            document.getElementById("DaySpan").innerHTML = (parseInt(document.getElementById("DaySpan").innerHTML) + 1);
            document.getElementById("QuarterSpan").innerHTML =
                (parseInt(document.getElementById("QuarterSpan").innerHTML) + 1);
        });

    var chart = {
        type: 'line',
        data: {
            datasets: [
                {
                    backgroundColor: '#000000',
                    borderColor: '#000000',
                    data: eval(@Model.Data)
                }
            ]
        },
        options: {
            elements: {
                line: {
                    tension: 0, // disables bezier curves
                    fill: false
                },
                point: {
                    radius: 0
                }
            },
            legend: {
                display: false
            },
            responsive: true,
            title: {
                display: true,
                text: "@Model.TickerNameAndSymbol"
            },
            tooltips: {
                mode: 'index',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: true
            },
            scales: {
                xAxes: [
                    {
                        type: 'linear',
                        display: true,
                        scaleLabel: {
                            display: false
                        },
                        ticks: {
                            min: 0,
                            max: 251
                        }
                    }
                ],
                yAxes: [
                    {
                        type: 'linear',
                        display: true,
                        scaleLabel: {
                            display: false
                        },
                        ticks: {
                            min: 0,
                            max: 3000
                        }
                    }
                ]
            }
        }
    };

    window.onload = function() {
// ReSharper disable once PossiblyUnassignedProperty
        window.myLine = new window.Chart(document.getElementById("Chart").getContext("2d"), chart);
    };

</script>