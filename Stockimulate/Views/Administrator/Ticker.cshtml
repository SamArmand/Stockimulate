@using System.Text
@model TickerViewModel

@{
    var statusDivCssClass = TickerViewModel.MarketStatus == "CLOSED" ? "bg-danger" : "bg-success";

    var security = Model.Security;

    var symbol = security.Symbol;

    var lastChange = TickerViewModel.LastChange[symbol];

    var tickerChangeDivCssCLass = lastChange > 0 ? "bg-success" : (lastChange < 0 ? "bg-danger" : "bg-warning");

    var prices = TickerViewModel.Prices[symbol];

    var price = prices.Count == 0 ? 0 : prices.Last();
}

<div class="container-fluid">

    <div class="row">

        <div class="col-9" id="GraphDiv" style="position: relative;">

            <canvas id="Chart"></canvas>

        </div>

        <div class="col-3">

            <div class="card text-white mb-3 text-center bg-primary">
                <div class="card-body">
                    <h1 id="TickerPriceH1">$@price</h1>
                </div>
            </div>

            <div class="card text-white mb-3 text-center @tickerChangeDivCssCLass" id="TickerChangeDiv">
                <div class="card-body">
                    <h1>

                        <span id="TickerCaretSpan">
                            @if (lastChange > 0)
                            {
                                <i class="fa fa-caret-up" aria-hidden="true"></i>
                            }
                            else if (lastChange < 0)
                            {
                                <i class="fa fa-caret-down" aria-hidden="true"></i>
                            }

                        </span>

                        <span id="TickerChangeSpan">
                            @Math.Abs(lastChange)
                        </span>
                    </h1>
                </div>
            </div>

            <div class="card text-white mb-3 text-center @statusDivCssClass" id="StatusDiv" style="height: auto">

                <h1>
                    <div>Q<span id="QuarterSpan">@TickerViewModel.Quarter.ToString()</span>
                    </div>
                    <div>Day <span id="DaySpan">@TickerViewModel.Day.ToString()</span>
                    </div>
                    <div>Mkt <span id="StatusSpan">@TickerViewModel.MarketStatus</span>
                    </div>
                </h1>
            </div>

        </div>

    </div>
    
    <div class="card bg-dark mt-3">
        <div id="NewsHeader"class="card-header"><h3>Br√©beufTV Nouvelles:</h3></div>
        <div class="card-body">
            <h2 id="NewsH2" class="card-title">@TickerViewModel.News</h2>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.0/Chart.js" integrity="sha256-Ps0pf4Ma5dU+zSI0m+Spwq+9QE5EjL5yt0dfWGPEugQ=" crossorigin="anonymous"></script>
    <script src="https://js.pusher.com/4.1/pusher.min.js"></script>
    <script>

        const tickerPriceH1 = document.getElementById("TickerPriceH1");
        const statusDiv = document.getElementById("StatusDiv");
        const statusSpan = document.getElementById("StatusSpan");
        const daySpan = document.getElementById("DaySpan");
        const quarterSpan = document.getElementById("QuarterSpan");
        const tickerChangeDiv = document.getElementById("TickerChangeDiv");
        const tickerChangeSpan = document.getElementById("TickerChangeSpan");
        const newsH2 = document.getElementById("NewsH2");
        const tickerCaretSpan = document.getElementById("TickerCaretSpan");

        // ReSharper disable once PossiblyUnassignedProperty
        const channel = (new Pusher('@Constants.PusherKey',
            {
                cluster: '@Constants.PusherCluster',
                encrypted: true
                // ReSharper disable once PossiblyUnassignedProperty
            })).subscribe('stockimulate');

        channel.bind('update-market',
            function(message) {
                
                var effect;
                var newPrice;

                if (message.day === 0) {
                    effect = 0;
                    newPrice = message.effects[@security.Id];
                } else {
                    effect = message.effects[@security.Id];
                    newPrice = parseInt(tickerPriceH1.innerText.substring(1)) + effect;

                    if (message.close) {
                        statusDiv.className = "card text-white mb-3 text-center bg-danger";
                        statusSpan.innerHTML = "CLOSED";
                    } else
                        daySpan.innerHTML = (parseInt(daySpan.innerHTML) + 1);
                }

                tickerPriceH1.innerHTML = `$${newPrice}`;

                chart.data.datasets[0].data.push({ x: parseInt(message.day), y: newPrice });
                window.myLine.update();

                tickerChangeSpan.innerHTML = Math.abs(effect);

                if (effect > 0) {
                    tickerChangeDiv.className = "card mb-3 text-center bg-success text-white";
                    tickerCaretSpan.innerHTML = '<i aria-hidden="true" class="fa fa-caret-up"></i>';
                } else if (effect < 0) {
                    tickerChangeDiv.className = "card mb-3 text-center bg-danger text-white";
                    tickerCaretSpan.innerHTML = '<i aria-hidden="true" class="fa fa-caret-down"></i>';
                } else {
                    tickerChangeDiv.className = "card mb-3 text-center bg-warning text-white";
                    tickerCaretSpan.innerHTML = "";
                }

                if (message.news !== "")
                    newsH2.innerHTML = message.news;
            });

        channel.bind('open-market',
            function() {
                statusDiv.className = "card text-white mb-3 text-center bg-success";
                statusSpan.innerHTML = "OPEN";
                daySpan.innerHTML = (parseInt(daySpan.innerHTML) + 1);
                quarterSpan.innerHTML =
                    (parseInt(quarterSpan.innerHTML) + 1);
            });

        var chart = {
            type: 'line',
            data: {
                datasets: [
                    {
                        backgroundColor: '#000000',
                        borderColor: '#000000',
                        
                        @{
                            var stringBuilder = new StringBuilder("[");

                            var pricesCount = prices.Count;

                            for (var i = 0; i < pricesCount; ++i)
                            {
                                stringBuilder.Append("{x: " + i + ", y: " + prices[i] + "}" +
                                                     (i < pricesCount - 1 ? ", " : string.Empty));
                            }
                        }
                        
                        data: eval(@stringBuilder.Append("]").ToString())
                    }
                ]
            },
            options: {
                maintainAspectRatio: false,
                elements: {
                    line: {
                        tension: 0, // disables bezier curves
                        fill: false
                    },
                    point: {
                        radius: 0
                    }
                },
                legend: {
                    display: false
                },
                responsive: true,
                title: {
                    display: true,
                    text: "@security.Name (@symbol)"
                },
                tooltips: {
                    mode: 'index',
                    intersect: false
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [
                        {
                            type: 'linear',
                            display: false,
                            scaleLabel: {
                                display: false
                            },
                            ticks: {
                                min: 0,
                                max: 251
                            }
                        }
                    ],
                    yAxes: [
                        {
                            type: 'linear',
                            scaleLabel: {
                                display: false
                            },
                            ticks: {
                                min: 0,
                                max: 3000
                            }
                        }
                    ]
                }
            }
        };

        window.onload = function() {
// ReSharper disable once PossiblyUnassignedProperty
            window.myLine = new window.Chart(document.getElementById("Chart").getContext("2d"), chart);
        };

    </script>
}